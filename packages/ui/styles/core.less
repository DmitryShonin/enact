// Enyo base styles
// These are generic, universal styles, independent of a visual library.
//

:global {
	.enact-body-fit {
		margin: 0;
		height: 100%;
		// helps prevent ios page scroll
		overflow: auto;
		position: relative;
	}

	.enact-fit {
		position: absolute;
		left: 0;
		top: 0;
		right: 0;
		bottom: 0;
	}

	.enact-clip {
		overflow: hidden;
	}

	// Touch interaction
	.enact-no-touch-action {
		-ms-touch-action: none;
	}

	.enact-untouchable {
		pointer-events: none;

		> * {
			pointer-events: auto;
		}
	}

	// Selection
	.enact-unselectable {
		cursor: default;
		-ms-user-select: none;
		-webkit-user-select: none;
		-moz-user-select: -moz-none;
		user-select: none;
	}

	.enact-selectable {
		cursor: auto;
		-ms-user-select: element;
		-webkit-user-select: text;
		-moz-user-select: text;
		user-select: text;
	}

	// To help visually tell what's going on
	.debug {
		// `.debug.aria` Add in an Aria overlay to visualize what is assigned to the aria attributes
		&.aria {
			.field() {
				position: absolute;
				font-size: small;
				font-weight: 100;
				background-color: #ffaa0099;
				color: white;
				border: 1px solid #ffaa00;
				border-radius: 0.5em;
				border-top-left-radius: 0;
				bottom: 0;
				padding: 0 1ex;
				transform: translateY(100%);
				line-height: 1.3em;
				z-index: 2;
				max-width: 100%;
				pointer-events: none;
			}

			&.all {
				[role]::after,
				[aria-checked]::after,
				[aria-controls]::after,
				[aria-disabled]::after,
				[aria-hidden]::after,
				[aria-label]::after,
				[aria-labelledby]::after,
				[aria-live]::after,
				[aria-owns]::after,
				[aria-pressed]::after,
				[aria-valuetext]::after {
					.field();
					content: "Role:(" attr(role) "), Checked:(" attr(aria-checked) "), Controls:(" attr(aria-controls) "), Disabled:(" attr(aria-disabled) "), Hidden:(" attr(aria-hidden) "), Label(" attr(aria-label) "), Labelledby:(" attr(aria-labelledby) "), Live:(" attr(aria-live) "), Owns:(" attr(aria-owns) "), Pressed:(" attr(aria-pressed) "), Valuetext:(" attr(aria-valuetext) ")";
				}
			}

			&.live {
				[aria-live]::after,
				[role]::after {
					.field();
					content: "Live(" attr(aria-live) "), Role(" attr(role) ")";
				}
			}

			&.relationship {
				[aria-controls]::after,
				[aria-labelledby]::after,
				[aria-owns]::after {
					.field();
					content: "Controls:(" attr(aria-controls) "), Labelledby:(" attr(aria-labelledby) "), Owns:(" attr(aria-owns) ")";
				}
			}

			&.role {
				[role]::after {
					.field();
					content: "Role(" attr(role) ")";
				}
			}

			&.widget {
				[aria-checked]::after,
				[aria-disabled]::after,
				[aria-hidden]::after,
				[aria-label]::after,
				[aria-pressed]::after,
				[aria-valuetext]::after {
					.field();
					content: "Checked(" attr(aria-checked) "), Disabled(" attr(aria-disabled) "), Hidden(" attr(aria-hidden) "), Label(" attr(aria-label) "), Pressed(" attr(aria-pressed) "), Valuetext(" attr(aria-valuetext) ")";
				}
			}
		}
	}
}
